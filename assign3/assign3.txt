Assign3: Due 11:59PM April 1

Please carry forward good practices, tools, and techniques you learned to use so far.

In this assignment we will create three versions of code to compute the Fibonacci number. Given a number greater than or equal to 0, the Fibonacci number for that number is the value at that given number as position in the series 1, 1, 2, 3, 5, 8, 13, 21,... In other words, the value at a position is equal to the sum of values at previous two positions. The first two positions, 0 and 1, have the values 1 and 1, respectively. The value as position 5, for example, is 8.

The three versions we will implement are:

1. Iterative solution. Use a loop to compute the value at a given position.

2. Recursive solution. Use a recursion to compute the value at a given position.

3. Use recursive solution with memoization. Memoization uses caching technique to store the value computed already. If the value that was computed is asked for once again, the cached value is retuned instead of being computed.

Write the three versions, one at a time, using test first approach. Also write a test that compares the speed of the memoized version with the recursive version to verify that one is faster than the other by at least an order of magnitude.

Use good design principles. After you're done with the coding part, answer the following questions:

1. What did you learn in this assignment?

In this assignment the easiest portion was coding the algorithm. Difficulty arose in the design. The DRY principle can be easily violated if we are not actively planning. Also, the DRY principle does not just apply to our main program methods. DRY principle must also be followed for classes, objects, and tests.

We also learned the use of memoization in design. Memoization is an efficient way to store the results obtained from a previous function call. When this method is called again, that data will be taken from the stored memory. Thus, memoization greatly reduces the time complexity of certain algorithms.

We learnt about the use mixing inheritance in Python. Furthermore, we learned about certain characteristics of polymorphism in python. In memoization part, polymorphism had to be used in order to hijack and reuse the sum part of fibonacci recursive. We did not expect polymorphism to behave this way in python.


2. What design principles did you use? List each one of them, discuss what this principle is, and give example(s) of where specifically you used it in this assignment.

DRY - Don't repeat yourself.
An example of this principle can be seen with the unit tests. For each fibonacci algorithm, the same basic set of tests is is used to test that method. Therefore, we wrote a base set of tests, and had each fibonacci algorithm test inherits from this base.

SRP - Single response principle.
An example of this principle can be seen with each method. SRP can be applied to the different implementation of the same method. Each method has a distinctive implementation, along with abiding the DRY principle.

YAGNI - You aren't gonna need it yet.
In the initial start of the project we had three different implementation on our hands. We needed to perform tests on the each implementation. We postponed recursive and memoized versions starting with the iterative version. Then tests are ran sucessfully for the iterative version. At this point the recursive version needs to be written, and the pattern continues till memoized version's test is finished. Since we delayed the implementation of recursive and memoized part, we knew more on how to write the latter more efficiently. Along this route we observed how if not observant, DRY and SRP can be violated.

Total [100]: 100

Tests pass [20]:
Coverage [10]:
Test Quality [20]:
Iterative Solution Quality [10]:
Recursive Solution Quality [10]:
Memoized Solution Quality [25]:
Answers to questions [5]:

