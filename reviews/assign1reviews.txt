[Venkat 02/25/16 07:24 AM GMT]
synopsis: good so far, move forward. 

details:
Status: We don't need this. Keep true or false for won or not.
No need for continue state.

Write tests to design color selection. The tests we'd need for this are:
1. five colors were selected
2. colors selected are from the pool of colors
3. colors selected are in random, that is not the same each time they're selected.

------------------------------------------------------------------------------
[Venkat 02/23/16 06:27 AM GMT]
synopsis: reduce a lot 

details:
Let's reduce a lot of code.

At this time we only need two methods, one to set colors (let's call it set_colors_selection) and one to guess or match colors (let's call it guess_colors). We don't need much code. Let set_colors_selection take an array or a list and set it. Let guess taken array or a list and return the result of comparison. Don't bring in any other functions at this time.

****** Use an enum for colors, do not use a string.
test_guess_more_than_20_chances_for_a_game:
This one is quite complex. Rewrite it like so:
set number of tries to 20 on the instance.
Then call guess with a perfect match and ensure the game is not reported to be a win.
Then write a test where guess with a perfect match reports a win (when number of tries has not been set to 20).

Avoid for loops in test.

test_guess_20: What does that mean, tells us what this test is expecting.

------------------------------------------------------------------------------
[Venkat 02/22/16 05:39 AM GMT]
synopsis: fix and move forward. 

details:
Wow, comments in code. Remove all comments. Instead write readable code.

test_set_selection_with_less_than_5_colors: Remove

test_set_selection_with_more_than_5_colors: Remove

test_set_selection_with_variable_wrong_type: Remove

test_guess_with_less_than_5_colors: Keep

"guess accepts less than 5 colors" should this read "guess does not accepts less than 5 colors"?

test_guess_with_more_than_5_colors: Keep

### irrelevent  - Remove comments in code.

test_guess_with_variable_wrong_type: Remove

test_guess_while_selection_not_set: Remove

test_game_all_match_for_correct_guess:
The \ at the end of lines are noisy. Let's remove them.

The function setSelection is a helper function, no need to write tests for these. The purpose of this function is to get us to verify the behavior of the guess function.

After fixing the above, move on to test various scenarios of guess, with different combinations. After that move on to write tests for the color selection function (not setSelection). Then test for the number of tries a player is allowed.

------------------------------------------------------------------------------
[Venkat 02/21/16 11:29 AM GMT]
synopsis: let's program with intention. 

details:
ColorSelection: Remove

TestCases: Remove this test class.

CodeSelectionTest: Remove this test class.

At this time of the design we only need one test class and one class, nothing more.

CodeBreakerTest:
tearDown: Remove

test_new_game_has_20_chances: Remove


test_game_return_5_blacks_for_correct_guess:
Instead of string, can we use enum for colors.
Instead of string 'Black' can we program with intention and use a values like MATCH_POSITION, NOMATCH, MATCH, for example?

Write positive and negative tests for guess. Think of situations like:
1. all colors in guess match by position with selected colors
2. no colors in guess are present in the selected colors
3. all colors in guess are in selected colors, but none in correct position
4. some colors in the guess match by position, some match but not in position, some are not in the selected colors
5. guess uses a color twice when the selection has no repeated colors
6. guess uses a color twice where one of them matches the selection by position and the other matches but not in position
7. guess uses a color twice and they match selection in place
8. guess has few colors than five

------------------------------------------------------------------------------
[Venkat 02/17/16 09:09 AM MST]
synopsis: let's focus on the most important things first 

details:
*** Start with a canary test. If you don't know what a canary test is,
see the TDD videos.

Delete everything and start over. We will start with a focus on the most important things first.

Write a test where all colors match.
call a function setSelection and send five different colors.
Then call a function guess and send the same colors.
Check that the response from the guess function has five black colors.
Write minimum code to make this test pass.

Now, write a test where all colors don't match.
Keep the same colors as in the previous test.
Send to guess five different colors that are not in the selected colors.
verify the response is all white colors.

Change the name of the test class to CodeBreakerTest. Change the name of the
class to CodeBreaker.

After you have minimum code to pass the two tests plus the canary test, ask for review.

I've created a build file to run the tests from the command prompt.
Type paver to run the tests and make sure all tests are passing before
checking in any code change.

------------------------------------------------------------------------------
[Venkat 02/16/16 06:40 AM EST]
synopsis: start with a canary test 

details:
Did not find any code. Start with a canary test.

------------------------------------------------------------------------------
