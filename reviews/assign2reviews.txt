[Venkat 03/08/16 05:06 AM MST]
synopsis: nice progress 

details:
Take a look at and remove any line of code not covered by tests.
http://agile.cs.uh.edu:8082/job/sd_16_nguyen_shahid/ws/assign2/cover/index.html

nice progress.

Write tests for getting the warmest cities. Then tests for getting the coldest cities.

------------------------------------------------------------------------------
[Venkat 03/05/16 15:32 PM MST]
synopsis: in the right direction. Fix and move forward. 

details:
Include coverage report (see pavement.py in assign1 or ask for help if you don't know how to include the coverage report).

If service reports that a zip code is invalid then capture that detail in the list so that information can be used later on.

After fixing these, move on to collect data about temperature and weather conditions. Again, keep the dependency on the real service away, continue to use mocks.

------------------------------------------------------------------------------
[Venkat 03/03/16 18:08 PM GMT]
synopsis: remove duplicated files, rework some things in the tests.

details:
Please don't leave commented out stuff in code or test.

WeatherReportTest:
Good tests.

ZipcodeInformation: Remove
ZipCodeInformation: Remove (found another file with this also)

ZipCodeInformationTest: Remove

ZipcodeInformation: Remove this (a third file with this stuff).

Just keep one of this (with only abstract method) in a separate file.
No implementation for this should be there at this time.

I am getting confused, I am seeing multiple files with the same class names.
Each class should appears in exactly one file, not in multiple files.
WeatherReportTest is found in more than one file.

I see what's going on. Get rid of pair_view. It should not be here.
Create whatever you like within your repository, but keep in assign2 only things that I should review and are part of "releasable" code for the assignment.

After fixing these, think of more tests for getting cities and states. What if the service (simulated by mock) were to fail. What if the zip code is reported by the service (simulated by mock of course) as invalid.

After that move on to working with the weather data.

Make sure you do not have any code what so every to deal with the real service, for cities data or for weather data, at this time. We do not want to see any real dependency being used right now.

------------------------------------------------------------------------------
[Venkat 03/01/16 06:49 AM GMT]
synopsis: let's change direction and refocus. 

details:
test_read_zipcode_5_digit:
Let's read into the design that this test is telling us about:

self.weatherReport.add_zipcode(["12345"]) This is adding a zip to the report.
That simply means we're adding a state to the object instead of asking it to do some real work. Let's avoid state as much as possible. It is easy to add state, hard to manage it later.

Let's remove all the tests (all files) and start with the following tests:

1. call a function with a list of 3 zip codes. In the test, mock out a service that, given a zip code, returns city and state. Now, for the code being tested, ensure it gives proper city and state for the 3 given zip codes.

2. call a function with only one zip code. Steps much like above.

3. call a function with empty list of zip code. Steps much like above except for needing the mock.

This will get us to focus on the main behavior of our code and help us define the interfaces we need for the dependencies.

------------------------------------------------------------------------------
[Venkat 02/29/16 05:44 AM GMT]
synopsis: build failed 

details:
---> pavement.default
---> pavement.clean
---> pavement.test
nosetests test
E
======================================================================
ERROR: Failure: ImportError (No module named 'requests')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.4/site-packages/nose/failure.py", line 39, in runTest
    raise self.exc_val.with_traceback(self.tb)
  File "/usr/local/lib/python3.4/site-packages/nose/loader.py", line 411, in loadTestsFromName
    addr.filename, addr.module)
  File "/usr/local/lib/python3.4/site-packages/nose/importer.py", line 47, in importFromPath
    return self.importFromDir(dir_path, fqname)
  File "/usr/local/lib/python3.4/site-packages/nose/importer.py", line 94, in importFromDir
    mod = load_module(part_fqname, fh, filename, desc)
  File "/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/imp.py", line 235, in load_module
    return load_source(name, filename, file)
  File "/usr/local/Cellar/python3/3.4.2_1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/imp.py", line 171, in load_source
    module = methods.load()
  File "<frozen importlib._bootstrap>", line 1220, in load
  File "<frozen importlib._bootstrap>", line 1200, in _load_unlocked
  File "<frozen importlib._bootstrap>", line 1129, in _exec
  File "<frozen importlib._bootstrap>", line 1471, in exec_module
  File "<frozen importlib._bootstrap>", line 321, in _call_with_frames_removed
  File ".../nguyen_shahid/assign2/test/zipcode_information_test.py", line 2, in <module>
    from src.zipcode_information import ZipCodeInformation
  File ".../nguyen_shahid/assign2/src/zipcode_information.py", line 1, in <module>
    import requests
ImportError: No module named 'requests'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)

------------------------------------------------------------------------------
[Venkat 02/28/16 09:20 AM GMT]
synopsis: start with a valuable behavior. 

details:

Testing for getters and setters is a common testing anti-pattern. Instead of testing for get and set, start with an interesting and valuable behavior.

------------------------------------------------------------------------------
