[Venkat 03/31/16 06:36 AM MDT]
synopsis: you're done 

details:             
Good job.

------------------------------------------------------------------------------
[Venkat 03/30/16 06:10 AM MDT]
synopsis: nice work so far

details:           
Nice use of timeit function.

Let's focus on answering assign3.txt questions.

------------------------------------------------------------------------------
[Venkat 03/29/16 06:08 AM MDT]
synopsis: let's keep it DRY 

details:
fibonacci_memoized:
This code is performing +. But that has already been done using sum in the recursive solution.
Instead of duplicating that solution here, let's reuse the recursive solution in the implementation of the memoized solution.

After doing that, write a performance test that shows that the memoized solution is faster than the recursive solution by at least 10 times.

------------------------------------------------------------------------------
[Venkat 03/28/16 04:39 AM MDT]
synopsis: let's move forward 

details:
class fibonacciTest(object):
Can we change this to class fibonacciTest:
                      
Move forward to the memoized-recursive solution. After writing revisit to ensure no principles are being violated.

------------------------------------------------------------------------------
[Venkat 03/27/16 08:03 AM MDT]
synopsis: let's keep it DRY 

details:
fibonacci_iterative_test:
FibonacciTest change to FibonacciIterativeTest.

fibonacci_recursive_test:
FibonacciTest change to FibonacciRecursiveTest.

Now,
FibonacciIterativeTest and FibonacciRecursiveTest do exactly the same thing but on two different functions. That's violating DRY. Let's remove the duplication without violating SRP. That is, each test class should focus only on one function, but without duplicating the tests.

------------------------------------------------------------------------------
[Venkat 03/26/16 04:17 AM PDT]
synopsis: refactor and move forward 

details:
fibonacci_iterative:
fibo_nums to previous
iteration to index

fibo_nums[1] to previous[1]
fibo_nums[0] + fibo_nums[1] to sum(previous)

Then move on to the recursive solution. After writing the code, think through to see if any design principles are being violated.

------------------------------------------------------------------------------
[Venkat 03/25/16 20:43 PM PDT]
synopsis: wow, where did all this code come from. Take small steps.

details:                                        
Delete everything other than iterative solution. Don't rush. Take small steps.
We have not completed the iterative solution yet, why do we want to rush and dump so much code?

------------------------------------------------------------------------------
[Venkat 03/23/16 21:27 PM PDT]
synopsis: let's refactor 

details:
fibonacci_iterative:
Let's refactor to functional style. How about using reduce?

------------------------------------------------------------------------------
[Venkat 03/22/16 23:56 PM PDT]
synopsis: Check CI build

details:
See <https://groups.google.com/d/msg/uhcss16sd/Iwkm8QfjswM/1PpehaKFHAAJ>

------------------------------------------------------------------------------
