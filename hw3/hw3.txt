HW3: Due 11:59PM April 8

According to the article <http://martinfowler.com/bliki/BeckDesignRules.html>, what are the rules of simple design. Why are these important? Discuss the impact of these principles. Give examples of using these principles in the class so far. Also, if you like, give from examples outside of this class, but limit to your personal experiences.

Martin Fowler discusses the four rules of simple design which are defined by Kent Beck, the developer of Extreme Programming, a software development methodology.

Rules of simple design

In the priority of most significant to taking precedence over next are the following: Passes the tests, Reveals intention, No duplication, and fewest elements.

Importance of the simple design rules

"Passes the tests" is the most important rule. This rule's primary aim is to show the software works as intended through test driven development. An example of a test driven development is unit testing. In our assignments, unit tests are written before any actual code is considered.

Using the test to drive our code helps us through decision making for what can be tested and then implemented. Examples of this rule can be seen in our assignment 3, where we wrote a Fibonacci test which documented the result of a given input. We write the test before the actual code to display an error along with what the output should have been, then we attempt to correct the error thus driving our implementation through the tests.

"Reveals intention" is a rule to enforce a self-documenting code, which eases readability of code and enables understanding of the programmer's intent. Self-documenting code describes how to give importance to names for variables, methods, objects, and classes. commenting that is done to explain what the variables, methods, objects, and classes are is a violation of self-documenting code.

In our assignments, our unit test cases have names which explicitly state what the advertised behavior of the test is. In the Fibonacci assignment, each different version was defined by a meaningful name which denoted the implementation of the method. Variables names in our assignments show their purpose and simply have meaningful names. We use variable name "index" to traverse through an array in assignment 2, not just "i." Code that reveals their intentions will be easier to understand and expand upon.

"No duplication" also known as the DRY principle. DRY defines don't repeat yourself. According to the article, elimination of duplicated code "is a powerful way to drive out good designs." Duplicating code meaning rewriting the logic you have set up again.

In assignment 3, we write the base set of test for Fibonacci. For a new algorithm of Fibonacci, we just needed to redirect the test class to reuse the base tests. It was very comfortable to write more tests of Fibonacci. Only one portion of code needed update. The core set of tests became more solid as it was tested more frequently.

"Fewest elements" rule focuses on keeping the software where only minimal vital behavior performs. The issue of not abiding by this rule creates extra complexity and decrease the extensibility within the software.

This rule often gets violated when not given reevaluation. For an example, In writing the memoized version of Fibonacci, we wanted to reuse the recursive code. There were several options to do that. If recursive and memoized methods were turned into object methods, polymorphism helped made the solution easy.

Confliction of rules

Rules may conflict with another, there is a case that Fowler describes which consists of two rules. The two rules are "reveals intention" and "No duplication". This is because often programmers would duplicated segments of code that can be factored into methods, the reasoning is for proper readability in that it reveals the intention as being read. It is to be noted that no matter what, like Fowler states "duplication to increase clarity is often papering over a problem, when it would be better to solve it."

Conclusion

Following these rules of simple design improve code in any design or paradigm. These rules set a guide for software design. Design is not a matter of taste rather it is of simplicity. These rules are generally applicable to any application for agile development.
