HW2: Due 11:59PM February 12

In this homework we'll create a strategic design for a version of the Mastermind game <https://en.wikipedia.org/wiki/Mastermind_(board_game)>.

There is no coding involved in this homework. Discuss your design ideas in this file and also visualize your design.

The modified version of the game is described here:

At the start of the game, the program chooses five colors from a pool of ten colors. There may be duplicate in the selected colors. The object of the game is for the player to guess the colors chosen. A player has 20 chances to make the correct guess.

After a user selects five colors, they can ask their entry to be evaluated.

The response by the program is also in colors. A white response means a miss. A black response means a perfect match at one of the positions. A silver response means there was a match of a color, but not in the correct position. The responses are ordered so all the white responses, if any, appear first, then the silver responses, if any, and then the black responses, if any.

Let's look at a few examples.

Assume the program selected the following combination of colors:

Red Green Yellow Red Blue

Here are some examples of a player's inputs and the responses from the program:

User input												  Program Response
Purple Orange Cyan Black White			White White White White White
Red Green Yellow Blue Black					White Silver Black Black Black
Red Green Yellow Red Yellow         White Black Black Black Black

The program will not display colors as string, but will show the actual colors on the UI instead.

The game ends when the user makes the correct guess, gives up, or runs out of the moves. When the game ends, the colors chosen by the program are displayed in full view for the player to see.

1. Discuss the high level design ideas for this program. Discuss the classes you'd create and the purpose of each one of them. Discuss different parts of the program and their responsibilities. List any assumptions you make.

I would create several classes as followed:
	- Color class: containing color name string, and its associating color hexcode.
	- ColorSelection class: containin an ordered list of 5 colors. Will be used to represent our program's color selections, user input, and also program responses. 
	- ColorPool class: containing a the pool of color, and has a random generator method of ColorSelection of selected length.
	- GameEngine class: main core of the game. It has responsibilities to start the game with a ColorSelection, keep count of how the users doing, and a method convert to user input into program response.
	- GraphicGameEngine class: interactive UI engine of the game. It displays program color's pool. User clicks on color to input, and program also display what the user has chosen. When done, program shows response. It would be based on GameEngine class by using inheritance.

I assumed several things:
	- User knows the rules the game fairly well. Example: They know there can be duplicate colors. I do not have to explain to them what the program response means.
	- The pool of colors does not contain white, black, or silver. I think it will be confusing for users.
	- I do not have to deal with complicated UI details right now. Like a feature where I have to be able to show previous user inputs and program responses. Or how exactly should I show the color pools: in filled circles, or squares.

2. Visualize the design, show the classes and their relationships.

It's perfectly OK to hand draw and take a snap of sketch using your smartphones. If you plan to use a tool, that's fine too, and you may save the files created by the tool in the hw2 directory. However, only files that are in pdf, jpeg, or png format will be reviewed.

3. What programming language would you recommend using for this program? Are there specific libraries or tools that you would recommend in addition to the language.

I would recommend C++ since I used it to build a GraphicEngine previously. It has some good libraries that can handle graphic, and interactive UI fairly simple. GLFW is library that builds upon OpenGL that I used previously. I think it will be enough in this case.
