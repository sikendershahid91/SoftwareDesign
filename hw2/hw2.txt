HW2: Due 11:59PM February 12

In this homework we'll create a strategic design for a version of the Mastermind game <https://en.wikipedia.org/wiki/Mastermind_(board_game)>.

There is no coding involved in this homework. Discuss your design ideas in this file and also visualize your design.

The modified version of the game is described here:

At the start of the game, the program chooses five colors from a pool of ten colors. There may be duplicate in the selected colors. The object of the game is for the player to guess the colors chosen. A player has 20 chances to make the correct guess.

After a user selects five colors, they can ask their entry to be evaluated.

The response by the program is also in colors. A white response means a miss. A black response means a perfect match at one of the positions. A silver response means there was a match of a color, but not in the correct position. The responses are ordered so all the white responses, if any, appear first, then the silver responses, if any, and then the black responses, if any.

Let's look at a few examples.

Assume the program selected the following combination of colors:

Red Green Yellow Red Blue

Here are some examples of a player's inputs and the responses from the program:

User input												  Program Response
Purple Orange Cyan Black White			White White White White White
Red Green Yellow Blue Black					White Silver Black Black Black
Red Green Yellow Red Yellow         White Black Black Black Black

The program will not display colors as string, but will show the actual colors on the UI instead.

The game ends when the user makes the correct guess, gives up, or runs out of the moves. When the game ends, the colors chosen by the program are displayed in full view for the player to see.

1. Discuss the high level design ideas for this program. Discuss the classes you'd create and the purpose of each one of them. Discuss different parts of the program and their responsibilities. List any assumptions you make.

We start this game design by analyzing the descriptions above. The most important aspect is a proper matching algorithm for user input. There are tricky situations. For example: there is only one red color in program's selection, and two red colors in input. If both reds are in wrong positions, will the second red be a white or a silver? We assume, in this case, it would be a white.

An important design assumption is that the user knows the game's rules fairly well. If not the case, we need to revise the design to how to educate the users the rules.

For the classes design, we select objects that comes naturally from descriptions. For example, colors are an important aspect, mentioned many times. Therefore, we think there should be a "Color" object.

For now, we create simple classes that deals with graphic output and input. Three classes comes from the Model-View-Controller pattern. This pattern seems easy and simple enough to implement. However, we assume the UI display and input controller details are not needed now.

From these assumptions, we created the first Color class. It will contains the color's name string, and it’s associating RGBvalue. It helps the UI to display the color. Also, we assume the color RGB value does not need to conform to a strict standard. We can define color "Green Orange" and its RGB value is "1 1 25".

Secondly, in descriptions, an ordered list of 5 colors is ubiquitous, and valuable. Therefore, we made ColorSelection class. This class contains a list of colors, with its length set to be a contant [sp] 5. This class will represent the program's selection, user input, and response.

The pool of colors also need its natural representation inside the program. ColorPool class address this. ColorPool also has a list of colors, with its length being a constant 10. An important method inside this class will be a generator that output a random ColorSelection. This method chooses 5 colors from the pool to make a ClassSelection instance. This method will create the program's 5 color selection.
 
The Model-View-Controller pattern gives us 3 of the following classes: GameEngine, GraphicView, and InputController, respectively. 

GameEngine handles the game state, and keep count of how the user is doing. The Match method inside is the most important. It takes in the user input, and program's selection. Its output will be the program response. The class itself stores the color pool, the color selections, and amount of chances left.

GraphicView handles the UI output, and will be manipulated by GameEngine class state. There are several variations to how this class will work. Most likely, it need to show the pool of 10 colors, user's current input, and program response. We assume the display details are not needed. 

Controller task is to take in the user's input. Then it updates the GameEngine state.

The Highlight of the GUI.

There will be three main panels for the simplicity. One larger rectangular panel on the left hand side which will be extending vertically will display the 10 colors from the colorSelection. The user panel will be centered bottom extending horizontally. This panel will display 10 empty boxes. User may click a box letting it be highlighted, which will allow for the user to then select a color from the colorSelection pool


2. Visualize the design, show the classes and their relationships.

It's perfectly OK to hand draw and take a snap of sketch using your smartphones. If you plan to use a tool, that's fine too, and you may save the files created by the tool in the hw2 directory. However, only files that are in pdf, jpeg, or png format will be reviewed.

3. What programming language would you recommend using for this program? Are there specific libraries or tools that you would recommend in addition to the language.

I would recommend C++ since I used it to build a GraphicEngine previously. It has some good libraries that can handle graphic, and interactive UI fairly simple. GLFW is library that builds upon OpenGL that I tried. I think it will be enough in this case. Qt is another thing I heard good things about, but have not used before.
