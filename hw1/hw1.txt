Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

Please read the academic honesty policy posted on the course mailing list.

Now to homework #1.

------------------------------------------------------------------------------
HW1: Due 11:59PM February 5

Q1. What's simple design?

A design that is easy to understand, easy to maintain, minimalistic (does not have irrelevant stuff), and in case it fails, that it fails gracefully.

Q2. Why should design be simple?

What a simple design is may be subjective. However, design should reach for simplicity, because simplicity is more maintainable than complexity. Keeping design simple would prevent high cost of fixing, which holds economic value. 

Maintainable simple design prefers modulatory, raising the design value to a higher quality. When we need to implement more features, or identifying errors, modularity helps to faster pinpoint parts that needs modification. 

Furthermore, simple design allows people to understand the code quicker, more accurately. When explaining the code to your peers, this feature helps a lot.

Q3. In your experience, from what you've seen, has there been problems with design not being simple or benefits from it being simple? Give examples of situations and impact. Discuss.

There has been always been issues with designs not being simple. Usually, fist-attemp code comes out to be cluttered. I found erasing the entire code, and starting from scratch to be more productive. It was better than trying to keep the starting design.

Recently, I had to write a code for signal processing in python. Going from first design to the last, the following can be observed. First-attempt holds far more variables, with undescriptive names. There were also unnecessary complex algorithm, and little utilization of functional programming. The last design was much shorter in length, and had fewer variables. It also showed better use of functional programming paradigm. 

When I explained my code to my peers, I spent less time explaining how this code works. They also tends to hold a better understanding of the code working better. Significant benefits came from this. My peers used less time trying to make sense of the code. They can quickly verified that my code idea worked as intended. Then they can start working based on that code. Also, I noticed less time wasted to do  searching for error reasons, and fixing them.

Nevertheless, simple design does not necessarily mean less the task than a complex one. My last design hold automated tasks, which were needed to be ran after the script ended. The first attempt, though larger in size, did not have these added tasks.

Essentially, simple modular design allow one to fit other valuable features in design.
