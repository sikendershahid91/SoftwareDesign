Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

Please read the academic honesty policy posted on the course mailing list.

Now to homework #1.

------------------------------------------------------------------------------
HW1: Due 11:59PM February 5

Q1. What's simple design?

A design that is easy to understand, easy to maintain, minimalistic (does not have irrelevant stuff), and in case it fails, that it fails gracefully.

Q2. Why should design be simple?

Simplicity is more maintainable than complexity. Keeping design simple would prevent high cost of fixing, which holds economic value. 

Maintainable simple design prefers modular design, which raises the design value to a higher quality. When we need to implement more features or identify errors, modularity helps to quickly pinpoint parts that needs modification. 

Furthermore, simple design allows people to understand the code quicker and more correctly. When explaining the code to your peers or team, this feature helps a lot by saving ample time.

Q3. In your experience, from what you've seen, has there been problems with design not being simple or benefits from it being simple? Give examples of situations and impact. Discuss.

There have been issues with designs not being simple. Usually, the first-attempt of the code comes out to be cluttered. I found erasing the entire code, and starting from scratch to be more productive. It was better than continuously trying to modify the starting design.

Recently, I had to write a code for signal processing in python. Going from first design to the last, the following can be observed. First-attempt holds far more variables, with random obscure names. There were also unnecessary complex algorithm, and little utilization of functional programming. In comparison, the last design is much shorter in length, with fewer yet more meaningful variables. The names gave a better sense of what the variables should do. Furthermore, the last design showed a heavier use of functional programming paradigm, which contributed to the shortened length.  

When showing the code to my team, I spent less time explaining how this code worked. This is because the code documents the design. Thus my team held a better understanding of how the code functioned. Significant benefits came from this. My team used less time trying to make sense of the code. Minimal time was needed to verify if my algorithm worked. For errors occurring in hindsight, little to no time was required to fix them. By then, my team could quickly proceed to further implementation of that code.

Grading:
Waiting for response to <https://groups.google.com/d/msg/uhcss16sd/z_bULCZEtVo/qoYO3kyiDwAJ> from Nguyen Shahid
