HW4 Due 11:59PM April 29

***There will be no reviews for this Homework***

Write your answer in this file. No extra files will be graded.

Give a collective answer as a pair, however, where needed, feel free to mention something specific to one person.

1. What did you essentially learn in this course about design?

Design is a process that is often looked as a difficult task. An overbearing task that is often implemented through complex solution. However, in this course we tackled design development, evolutionary design, design principles, and design patterns. The most important thing we learned is to take a problem at hand, and solve it step by step. Difficult problems can be solved through simple solutions. What is simple solution? In this course we learned that a simple solution is a solution that requires the minimal amount of code and is quite an extensible code. In the process of software design development looking at the cost effective aspect, the cheapest aspect is the building of the project. The most expensive aspect is the writing and debugging the fixes of a software. There are concepts and principles to abide by that will allow a programmer to produce extensible, simple and effective software design. 

The problem that usually arises with design is complexity. Often a programmer considers too many features. Features that have not been evaluated based on their cost and importance. Then the programmer puts effort in implementing all these features when they are not needed in the initial program. The consequences are high complexity that is difficult to debug and analyze.

When given a task, a software engineer needs to evaluate the problem and take step by step procedure in solving the different elements of a program. Too much upfront design is a terrible decision because you often do not consider other solutions because with upfront one lays a structure when they may not fully know the problem on hand. Test Driven Development (TDD) is a great way to develop a software. Through TDD, one creates tests for all parts of the software. There are different types of tests which can be involved heavily. One way is to create Unit test, a unit test allows a programmer to create and document a test which tests the behavioral expectation of the code at the class level. TDD contributes heavily to a tactical design concept. This is because in TDD a programmer will allow the creation of the program after a test has been written and a test has been performed. This way, programmers are driven to think about the tactical design. Good code comes from being continuously rewritten, refactored. You start with some small test code, and continuously expand the tested code, and then refactor it again. After each code change, you recheck all the tests written. This method when dedicated saves ample time value when a problem arises. 

Programming patterns are some good ways to create code, and communicate the coding ideas you have. However, you should not blindly use patterns. When learning a new pattern, you work on a few examples to get a feel of how it works. When you deal with a problem, you will be able to think of several possible patterns and how to modify them based on what had been observed. Design patterns are to be discussed if a certain aspect in the pattern is relevant.
	 
In general, the SOLID (single readability, open closed, Liskov substitution, and dependency inversion) principles of object-oriented design should be looked at frequently. These principles allow you to observe the bad smells of the code, and guide you to develop solutions on the right software design route.

2. What are some of the general guidelines you would follow when designing?

Starting of a design, we would initially start of with a coarse-grained strategic design. Discussing what we think the architecture of the software looks like. Discussing what are the required classes for our design. This all can be simply done on a piece of paper.

When starting the program, it is great practice to perform TDD. When writing the program it would be essential to start of with the mist important yet silly test. This is the canary test to make sure the environment is properly set up.

Then we write a test for the code we want. Only after we create the test, we write the code. Initially, the code can do simple things to pass the test which will allow the basic elements of the software to be built. As the process of writing a test, allowing the test to fail, then correcting the test we expand the behavior of the code. This cycle that is followed is called Test Driven Development (TDD).

Don't Repeat Yourself is good guideline to follow. As the code expands, we need to constantly refactor. Look at the code we created, see which ones we really need, remove unnecessary ones. Usually, long methods are rotten, so we divide it into smaller functions. If some code seems to repeat itself continuously then this code is often needed thus mustbe be refactored to method that can be reused. 

A good style of programing is to write a self-documenting code. little things such as the names of methods and variables can impact the readability of a software. A good guideline would be to select meaningful names for the Methods and variables. They should be easy to to understand, not short, and obscure.

Don't use too many outside libraries. As time progresses, the outdated libraries will create errors inside your code. It is good practice to create an equal balance of the interfaces and concrete classes. The rule of thumb is to use the distance equation to allow the software to be very close to 0.2.
