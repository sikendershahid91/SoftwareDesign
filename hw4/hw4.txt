HW4 Due 11:59PM April 29

***There will be no reviews for this Homework***

Write your answer in this file. No extra files will be graded.

Give a collective answer as a pair, however, where needed, feel free to mention something specific to one person.

1. What did you essentially learn in this course about design?

Design is a process that is often looked as a difficult task. An overbearing task that is often implemented through complex solution. However, in this course we tackled design development, evolutionary design, design principles, and design patterns. The most important thing we learned is to take a problem at hand, and solve it step by step. Difficult problems can be solved through simple solutions. What is simple solution? In this course we learned that a simple solution is a solution that requires the minimal amount of code and is quite an extensible code. In the process of software design development looking at the cost effective aspect, the cheapest aspect is the building of the project. The cost extensive aspect is the effort and debugging the fixes of a software. Time is spent that in debugging and writing code. There are concepts and principles to abide by that will allow a programmer to produce extensible, simple and effective software design. 

The problem that usually arises with design is complexity. Often a programmer considers a route which often has many features but features that have not been evaluated based on cost and importance. Then the programmer puts effort in implementing all the features when they are not needed or often not needed in the initiation of the program. The causality there reverts to high complexity that is difficult to debug and analyze.

When given a task, a software engineer needs to evaluate the problem and take step by step procedure in solving the different elements of a program if they exist. Too much upfront design is a terrible decision because you often do not consider other solutions to the different elements of the program because with upfront one lays a structure when they may not fully know the problem on hand. Test Driven Development (TDD) is a great way to initiate and develop a software. Through TDD, one creates tests for all parts of the software. There are different types of tests which can be involved heavily. One way is to create Unit test, a unit test allows a programmer to create and document a test which tests the behavioral expectation of the code at the class level. TDD contributes heavily to a tactile design concept. This is because in TDD a programmer will allow the creation of the program after a test has been written and a test has been performed. This way, programmers are driven to think about the tactical design. Good code comes from being continuously rewritten, refactored. You start with some small test code, and continuously expand the tested code, and then refactor it again when you see fit while automating the tests written. This method when dedicated saves ample time value when a problem arises. 

Programming patterns are some good ways to create code, and communicate the coding ideas you have. However, you should not blindly use patterns. When learning a new pattern, you work on a few examples to get a feel of how it works. When you deal with a problem, you will be able to think of several possible patterns and how to modify them based on what had been observed. Design patterns are not there to be followed and rewritten, more so be discussed if a certain feature in the pattern is quite relevant.
	 
In summary, the SOLID (single reasonability, open closed, Liskov substitution, and dependency inversion) principles of object-oriented design and should be evaluated for frequently. These principles allow you to feel and observe the bad smells of the code, and promote you to solve it based on the principles which are there to guide you to the right software design route.

2. What are some of the general guidelines you would follow when designing?

When writing a program, we start about the most important component of the code. First, we write a small canary test to make sure the environment is properly set up.

Then we write a test for the code we want. Only after we create the test, we write the code. Initially, the code should do simple things to pass the test. Before we expand the functionality of the code, we usually need to write the tests first.

Don't Repeat Yourself is good guideline to follow. As the code expands, we need to constantly refactor. Look at the code we created, see which ones we really need, remove unneccessary ones. Usuually, long methods are rotten, so we divide it into smaller functions. If somes code seems to repeat itself,Also, methods and variables names should be easy to to understand, not short, and obscure.

Don't use too many outside libraries. As time progresses, the outdated libraries will create errors inside your code.





