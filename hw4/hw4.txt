HW4 Due 11:59PM April 29

***There will be no reviews for this Homework***

Write your answer in this file. No extra files will be graded.

Give a collective answer as a pair, however, where needed, feel free to mention something specific to one person.

1. What did you essentially learn in this course about design?

I learnt about the importance of software design, and the best way to approach it. In the process of creating software, the task of building (compiling) is actually the cheapest. A lot of effort and money is spent on designing software. Therefore, the best software is usually highly reusuable.

When given a task, a software engineer usually needs time to totally figure out. Too much upfront design is a terrible decision because you don't know really understand the problem yet. Test-driven development methodology is a great way to start writing software. You create tests to document the expectations of what your code does. This way, programmers are driven to think about the tactical design. Good code comes from being continuously rewritten, refactored. You start with some small code, and continuously expand it, and then refactor it again when you see fit.

In general, the SOLID (single responbility, open closed, Liskov substitution, and dependecy inversion) principles of object-oriented programming should be followed closely. These principles allow you to feel the bad smells of the code, and guide you to fix it.

Programming patterns are some good ways to design code, and communicate the design ideas you have. However, you should not blindly use patterns. When learning a new pattern, you work on a few examples to get a feel of how it works. When you deal with a problem, you will be able to think of several possible patterns and how to modify them.

2. What are some of the general guidelines you would follow when designing?

When writing a program, we start about the most important component of the code. First, we write a small canary test to make sure the environment is properly set up.

Then we write a test for the code we want. Only after we create the test, we write the code. Initially, the code should do simple things to pass the test. Before we expand the functionality of the code, we usually need to write the tests first.

Don't Repeat Yourself is good guideline to follow. As the code expands, we need to constantly refactor. Look at the code we created, see which ones we really need, remove unneccessary ones. Usuually, long methods are rotten, so we divide it into smaller functions. If somes code seems to repeat itself,Also, methods and variables names should be easy to to understand, not short, and obscure.

Don't use too many outside libraries. As time progresses, the outdated libraries will create errors inside your code.





